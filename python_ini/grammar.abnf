;
; Ref: https://en.wikipedia.org/wiki/INI_file
; This SABNF grammar encompasses most of the stable and varying feature of the WikiPedia
; artcle. The only significant ommission is that subsections are not supported.
;
; comments begin with the semicolon(;) or hash(#) and continue to the end of the line
; comments may appear on valid section and value lines as well as blank lines
; line ends may be CRLF, LF or CR
; lines may be continued by ending them with a backslash and the following line begins with space or tab
; e.g.
; key = value , value, \
;       value
;
; section and key names are case sensitive
; section and key names are liberally defined as one or more characters from the set:
;   a-z
;   A-Z
;   0-9
;   !$%&()*+-.<>?@^_`{|}~
;   (basically, alphabet, numeric, underscore, hyphen or any character not used as a special or reserved character)
;
; keys may have multiple values
;   - multiple values may be given as a comma or space delimited list on a single line
;   - values are "disjoint" - values listed for multiple occurrances of a key are concatenated
;   - values may be numbers, booleans, or strings
;   - strings may be single-quoted, double-quoted strings or unquoted
;
; keys appearing before the first section are allowed and termed the "global" section.
;
; section names are optional - the file may consist of only a "global" section
;
; sections are "disjoint",
;   - that is the keys in multiple occurrences of a section name are
;     joined together as if they appeared contiguously in a single section
;
; sections end at the beginning of a new section or the end of file
;
; The grammar is designed to accept any string of ASCII characters without failure.
; The "error productions", bad-section-line, bad-value-line, bad-blank-line are meant to accept all lines
; that are not otherwise correct blank, section or value lines. This allows the
; parser to report the input errors in an application-dependent manner.
;
ini-file            = *(blank-line / value-line) *section
section             = section-line *(blank-line / value-line)
section-line        = good-section-line / bad-section-line
good-section-line   = %d91 owsp section-name owsp %d93 owsp [comment] line-end
bad-section-line    = %d91 *any line-end;
value-line          = good-value / bad-value-line
good-value          = key-name [key-delim [value-array]] owsp [comment] line-end
key-delim           = (owsp (%d61 / %d58) owsp) / wsp ; = or : or white space
bad-value-line      = (%d33-90 / %d92-126) *(line-continue / any) line-end
value-array         = value *(value-delim value)
value-delim         = (owsp %d44 owsp) / wsp
section-name        = name
key-name            = name
name                = 1*(%d97-122 
                    / %d65-90 
                    / %d48-57 
                    / %d33 
                    / %d36-38
                    / %d40-43
                    / %d45-46
                    / %d60 
                    / %d62-64 
                    / %d94-95
                    / %d123-126)
value               = number / boolean / d-quoted-string / s-quoted-string / string
boolean             = null / true / false
true                = "true" / "yes" / "on"
false               = "false" / "no" / "off"
null                = "null" / "void" / "none"
number              = (int / float) &(%d44 / wsp / digit-line-end)
                      ; digit-line-end is a line that does not increment the line counter
                      ; numbers must be followed by a delimiter or line end
int                 = [%d43 / %d45] 1*digit &(%d44 / wsp / digit-line-end)
float               = [sign] decimal [exponent]
sign                = "+" / "-"
decimal             = integer [dot [fraction]]
                    / dot fraction
integer             = 1*%d48-57
dot                 = "."
fraction            = 1*%d48-57
exponent            = "e" [esign] exp
esign               = "+" / "-"
exp                 = 1*%d48-57                      
string              = 1*(%d33 / %d36-38 / %d40-43 / %d45-46 / %d48-57 / %d60 / %d62-91 / %d93-126 / escaped)
                      ; characters not allowed: space " # ' , / : ; = \
d-quoted-string     = %d34  d-quoted-value %d34
d-quoted-value      = 1*(%d32-33 / %d35-91 / %d93-126 / escaped)
s-quoted-string     = %d39 s-quoted-value %d39
s-quoted-value      = 1*(%d32-38  /  %d40-91 / %d93-126 / escaped)
escaped             = reverse-solidus (reverse-solidus
                    / solidus
                    / double-quote
                    / hash
                    / single-quote
                    / comma
                    / colon
                    / semicolon
                    / equal-sign
                    / blank
                    / tab
                    / line-feed
                    / carriage-return
                    / u_unicode8
                    / u_unicode4
                    / u_hexadecimal
                    / u_escaped-error)
; u_hexadecimal - UDT "xhh", exactly 2 hex digits [0-9a-fA-F]                    
; u_unicode4    - UDT "uhhhh", exactly 4 hex digits and semantic checking for valid Unicode characters
;                 surrogates, xd800 - xdfff, not allowed
; u_unicode8    - UDT "Uhhhhhhhh", exactly 8 hex digits and semantic checking for valid Unicode characters
;                 surrogates, xd800 - xdfff, and > x10ffff not allowed
reverse-solidus     = %x5c
double-quote        = %x22
hash                = %x23
single-quote        = %x27
comma               = %x2c
solidus             = %x2f
colon               = %x3a
semicolon           = %x3b
equal-sign          = %x3d
blank               = %s"b" ; %x20
tab                 = %s"t" ; %x09
line-feed           = %s"n" ; %x0a
carriage-return     = %s"r" ; %x0d
blank-line          = good-blank-line / bad-blank-line
good-blank-line     = owsp [comment] line-end
bad-blank-line      = (%d32 / %d9) owsp (%d33-58 / %d60-126) *any line-end
line-end            = %d13.10 / %d10 / %d13 / %$
digit-line-end      = %d13.10 / %d10 / %d13 / %$
line-continue       = %d47 *any line-end *(%d32 / %d9)
comment             = (%d35 / %d59) *any
owsp                = *(%d32 / %d9 / line-continue)
wsp                 = 1*(%d32 / %d9 / line-continue)
alpha               = %d65-90 / %d97-122
digit               = %d48-57
any                 = %d32-126 / %d9
